imports:
  - http://dice-project.github.io/DICE-FCO-Plugin-Cloudify/0.1.1/plugin.yaml


inputs:

  agent_user:
    description: >-
      User that can be used to login to cloud image (for Ubuntu images, this
      should normally be set to ubuntu, for Centos to centos).

  small_image_id:
    description: FCO image id that should be used on small instances.
  small_server_type:
    description: FCO server type that should be used on small instances.
  small_disk:
    description: FCO disk that should be used on small instances.

  medium_image_id:
    description: FCO image id that should be used on medium instances.
  medium_server_type:
    description: FCO server type that should be used on medium instances.
  medium_disk:
    description: FCO disk that should be used on medium instances.

  large_image_id:
    description: FCO image id that should be used on large instances.
  large_server_type:
    description: FCO server type that should be used on large instances.
  large_disk:
    description: FCO disk that should be used on large instances.

  # TODO: This should be set on manager on bootstrap, but FCO plugin does not
  # support such functionality yet.
  username:
    description: FCO username (UUID).
  password:
    description: FCO password.
  customer:
    description: FCO customer (UUID).
  service_url:
    description: FCO REST service base url.
  agent_key:
    description: UUID of the key that should be used by plugin.
  vdc:
    description: UUID of the VDC that should be used to create instances.
  network:
    description: UUID of the network that instances should be connected to.


node_types:

  dice.firewall_rules.Base:
    derived_from: dice.firewall_rules.Unimplemented

  # Dummy floating IP that simply holds copy of VM's IP address
  dice.VirtualIP:
    derived_from: cloudify.nodes.Root

  dice.hosts.Custom:
    derived_from: cloudify.flexiant.nodes.Server
    properties:
      auth:
        default:
          username: { get_input: username }
          password: { get_input: password }
          customer: { get_input: customer }
          url: { get_input: service_url }
          verify_ca_cert: False
      agent_key:
        default: { get_input: agent_key }
      vdc:
        default: { get_input: vdc }
      network:
        default: { get_input: network }
      cloudify_agent:
        default:
          user: { get_input: agent_user }

  dice.hosts.Small:
    derived_from: dice.hosts.Custom
    properties:
      image:
        default: { get_input: small_image_id }
      server_type:
        default: { get_input: small_server_type }
      disk:
        default: { get_input: small_disk }

  dice.hosts.Medium:
    derived_from: dice.hosts.Custom
    properties:
      image:
        default: { get_input: medium_image_id }
      server_type:
        default: { get_input: medium_server_type }
      disk:
        default: { get_input: medium_disk }

  dice.hosts.Large:
    derived_from: dice.hosts.Custom
    properties:
      image:
        default: { get_input: large_image_id }
      server_type:
        default: { get_input: large_server_type }
      disk:
        default: { get_input: large_disk }


relationships:

  dice.relationships.ProtectedBy:
    derived_from: dice.relationships.Unimplemented

  # When connection is established, we copy address from VM. This may seem
  # a bit backwards at first, but things are done this way in order to be
  # consistent with OpenStack and Amazon way of doing things.
  dice.relationships.IPAvailableFrom:
    derived_from: cloudify.relationships.connected_to
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish:
          implementation: dice.dice_plugin.tasks.base.copy_ip_from_source
          executor: central_deployment_agent
          inputs:
            property: { default: floating_ip_address }
